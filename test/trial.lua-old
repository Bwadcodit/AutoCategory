-- ---------------------------------
-- Create a dropdown control helper
AC_DropDown = {}
function AC_DropDown:New(ref, index) 
    local o = {}
    setmetatable(o,self)
    self.__index = self
    o.reference = ref
    o.indexValue = SF.nilDefault(index, "")
    o.choices = {}
    o.choicesValues = {}
    o.choicesTooltips = {}
    return o
end

function AC_DropDown:GetSelection()
    return self.indexValue
end

function AC_DropDown:Select(item)
    self.indexValue = item
    self:Update()
end

function AC_DropDown:SelectFirst()
    if #self.choicesValues > 0 then
        self.indexValue = self.choicesValues[1]
    else
        self.indexValue = nil
    end
end

function AC_DropDown:IsEmpty()
    if self.choicesValues and #self.choicesValues > 0 then
        return false
    end
    return true
end

function AC_DropDown:GetDataChoices()
    return self.choices
end
function AC_DropDown:GetDataValues()
    return self.choicesValues
end
function AC_DropDown:GetDataTooltips()
    return self.choicesTooltips
end

function AC_DropDown:SetData(choices, values, tooltips)
    self.choices = choices
    self.choicesValues = values
    self.choicesTooltips = tooltips
end

function AC_DropDown:Update()
    local dropdownCtrl = WINDOW_MANAGER:GetControlByName(self.reference)
    dropdownCtrl:UpdateChoices(self.choices, self.choicesValues, self.choicesTooltips)  
end

-- ---------------------------------
local DD_Bag_Import = AC_DropDown:New("AC_DROPDOWN_IMPORTBAG_BAG", AC_BAG_TYPE_BACKPACK)
local DD_Bag_EditBag = AC_DropDown:New("AC_DROPDOWN_EDITBAG_BAG", AC_BAG_TYPE_BACKPACK)
local DD_Tag_AddRule = AC_DropDown:New("AC_DROPDOWN_ADDCATEGORY_TAG")
local DD_Tag_Edit = AC_DropDown:New("AC_DROPDOWN_EDITRULE_TAG")
local DD_Rule_EditBag = AC_DropDown:New("AC_DROPDOWN_EDITBAG_RULE")
local DD_Rule_Edit = AC_DropDown:New("AC_DROPDOWN_EDITRULE_RULE")
local DD_Rule_AddRule = AC_DropDown:New("AC_DROPDOWN_ADDCATEGORY_RULE")

-- -------------------------------------

-- setting the selected value in the specified dropdown data table
local function SelectDropDownItem(typeString, item)
    dropdownData[typeString].indexValue = item
end

-- return the item that was selected in the specified dropdown data table
local function GetDropDownSelection(typeString)
    return dropdownData[typeString].indexValue
end

local DD_Bag =  {       
    type = "dropdown",
    name = SI_AC_MENU_BS_DROPDOWN_BAG,
    scrollable = false,
    tooltip = SI_AC_MENU_BS_DROPDOWN_BAG_TOOLTIP,
    width = "half",
    reference = "AC_DROPDOWN_EDITBAG_BAG",
    
    choices = dropdownData["AC_DROPDOWN_EDITBAG_BAG"].choices,
    choicesValues = dropdownData["AC_DROPDOWN_EDITBAG_BAG"].choicesValues,
    choicesTooltips = dropdownData["AC_DROPDOWN_EDITBAG_BAG"].choicesTooltips,
    
    getFunc = function()  
        return GetDropDownSelection("AC_DROPDOWN_EDITBAG_BAG")
    end,

    setFunc = function(value)   
        SelectDropDownItem("AC_DROPDOWN_EDITBAG_BAG", value)
        -- change other drop down lists based on the value selected from
        -- this one
        SelectDropDownItem("AC_DROPDOWN_EDITBAG_RULE", "")
        --reset add rule's selection, since all data will be changed.
        SelectDropDownItem("AC_DROPDOWN_ADDCATEGORY_RULE", "")
         
        RefreshDropdownData() 
        DD_Bag:UpdateControl()
        UpdateDropDownMenu("AC_DROPDOWN_EDITBAG_RULE")
        UpdateDropDownMenu("AC_DROPDOWN_ADDCATEGORY_RULE")
    end, 
}

function DD_Bag.getFunc()
        return GetDropDownSelection("AC_DROPDOWN_EDITBAG_BAG")
end

function DD_Bag.setFunc(value)   
    SelectDropDownItem("AC_DROPDOWN_EDITBAG_BAG", value)
    -- change other drop down lists based on the value selected from
    -- this one
    SelectDropDownItem("AC_DROPDOWN_EDITBAG_RULE", "")
    --reset add rule's selection, since all data will be changed.
    SelectDropDownItem("AC_DROPDOWN_ADDCATEGORY_RULE", "")
     
    RefreshDropdownData() 
    DD_Bag:UpdateControl()
    UpdateDropDownMenu("AC_DROPDOWN_EDITBAG_RULE")
    UpdateDropDownMenu("AC_DROPDOWN_ADDCATEGORY_RULE")
end
    
function DD_Bag:SetData(choices, values, tooltips)
    self.choices = choices
    self.choicesValues = values
    self.choicesTooltips = tooltips
end

function DD_Bag:UpdateControl()
    local dropdownCtrl = WINDOW_MANAGER:GetControlByName(self.reference)
    dropdownCtrl:UpdateChoices(self.choices, self.choicesValues, self.choicesTooltips)  
end
